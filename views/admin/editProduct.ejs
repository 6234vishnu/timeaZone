<%- include("../../views/partials/admin/header") %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />

<section class="contentmain">
  <div class="content-header">
    <h2 class="content-title">Edit Product</h2>
  </div>
  <div class="card mb-4">
    <div class="card-body">
      <form method="post" action="/admin/editProducts/<%= product._id %>" enctype="multipart/form-data" >
        

        <div class="mb-4">
          <label for="product_name" class="form-label">Product Name</label>
          <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name" value="<%= product.name %>" />
          <div id="productName-error" class="error-message"></div>
        </div>

        <p><strong style="color: red;">Existing Brand : </strong><%=product.brand.name  %></p>
        <div class="col-lg-4 mb-4">
          <label class="form-label"> Select new Brand</label>
          <select class="form-select border" name="brand">
            <% for (let i = 0; i < brand.length; i++) { %>
              <option value="<%= brand[i].name %>" <%= product.brand === brand[i].name ? 'selected' : '' %>><%= brand[i].name %></option>
            <% } %>
          </select>
          <div id="brand-error" class="error-message"></div>
        </div>

        <div class="mb-4">
          <label class="form-label">Full description</label>
          <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"><%= product.description %></textarea>
          <div id="description-error" class="error-message"></div>
        </div>

        <div class="row">
          <div class="col-lg-4">
            <div class="mb-4">
              <label class="form-label">Regular price</label>
              <input placeholder="$" name="regularPrice" type="text" class="form-control border" id="regularPrice" value="<%= product.regularPrice %>" />
              <div id="regularPrice-error" class="error-message"></div>
            </div>
          </div>
          <div class="col-lg-4">
            <div class="mb-4">
              <label class="form-label">Sale price</label>
              <input placeholder="$" name="salePrice" type="text" class="form-control border" id="salePrice" value="<%= product.salePrice %>" />
              <div id="salePrice-error" class="error-message"></div>
            </div>
          </div>
          <div class="col-lg-4">
            <div class="mb-4">
              <label class="form-label">Quantity</label>
              <input placeholder="" name="quantity" type="text" class="form-control border" id="quantity" value="<%= product.quantity %>" />
              <div id="quantity-error" class="error-message"></div>
            </div>
          </div>
        </div>

 <p><strong style="color: red;">Existing category : </strong><%=product.category.name  %></p>
        <div class="col-lg-4 mb-4">
          <label class="form-label"> Select new category</label>
          <select class="form-select border" name="category">
            <% for (let i = 0; i < category.length; i++) { %>
              <option value="<%= category[i].name %>" <%= product.category === category[i].name ? 'selected' : '' %>><%= category[i].name %></option>
            <% } %>
          </select>
          <div id="category-error" class="error-message"></div>
        </div>

        <h2>Select Colors</h2>
        <label><input type="checkbox" name="color" value="black" <%= product.colors && product.colors.includes('black') ? 'checked' : '' %>> Black</label><br>
        <label><input type="checkbox" name="color" value="white" <%= product.colors && product.colors.includes('white') ? 'checked' : '' %>> White</label><br>
        <label><input type="checkbox" name="color" value="gold" <%= product.colors && product.colors.includes('gold') ? 'checked' : '' %>> Gold</label><br>
        <label><input type="checkbox" name="color" value="silver" <%= product.colors && product.colors.includes('silver') ? 'checked' : '' %>> Silver</label><br>

        <div>
          <% for (let i = 0; i < product.productImage.length; i++) { %>
            <img src="/re-image/<%= product.productImage[i] %>"  alt="Product Image" style="height: 150px;" >
            <button type="button" onclick="deleteImage('<%= product._id %>', '<%= product.productImage[i] %>')">Delete</button>
          <% } %>
        </div>

        <div class="card mb-4">
          <div class="card-header">
            <h4>Choose images</h4>
          </div>
          <div class="border row">
            <div id="addedImagesContainer" class="thumbnails-container"></div>
          </div>
          <div class="row">
            <div class="card-body align-items-center" style="margin-bottom: 20px">
              <img src="" alt="" id="imgView1" />
              <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 1)" />
              <div id="images-error" class="error-message"></div>
            </div>
            <div class="image-cropper" id="cropperContainer1" style="display: none;">
              <img src="" id="croppedImg1" alt="choosed image" />
              <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
            </div>
          </div>

        </div>

        <button class="buttompublish" type="submit">Update Product</button>
      </form>
    </div>
  </div>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
 let cropper1, cropper2, cropper3;

function viewImage(event, index) {
  const input = event.target;
  const reader = new FileReader();

  reader.onload = function (e) {
    const img = document.getElementById(`imgView${index}`);
    img.src = e.target.result;
    img.style.maxWidth = "150px";

    const cropperContainer = document.getElementById(`cropperContainer${index}`);
    cropperContainer.style.display = "block";

    // Destroy previous cropper instance if it exists
    if (index === 1 && cropper1) cropper1.destroy();
    if (index === 2 && cropper2) cropper2.destroy();
    if (index === 3 && cropper3) cropper3.destroy();

    // Initialize a new cropper instance
    if (index === 1) {
      cropper1 = new Cropper(img, { aspectRatio: 1, viewMode: 1 });
    } else if (index === 2) {
      cropper2 = new Cropper(img, { aspectRatio: 1, viewMode: 1 });
    } else if (index === 3) {
      cropper3 = new Cropper(img, { aspectRatio: 1, viewMode: 1 });
    }
  };

  reader.readAsDataURL(input.files[0]);
}

function deleteImage(productId, image) {
  if (image) {
    fetch(`/admin/deleteProductImage/${productId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ image }),
    })
    .then(response => response.json())
    .then(data => {
      console.log('Image deleted successfully:', data);
      location.reload(); 
    })
    .catch(error => {
      console.error('Error deleting image:', error);
    });
  }
}

document.getElementById('saveButton1').addEventListener('click', () => saveCroppedImage(cropper1, 1));
document.getElementById('saveButton2').addEventListener('click', () => saveCroppedImage(cropper2, 2));
document.getElementById('saveButton3').addEventListener('click', () => saveCroppedImage(cropper3, 3));

function saveCroppedImage(cropper, index) {
  const productId = '<%= product._id %>'; 
  const croppedImg = document.getElementById(`croppedImg${index}`);
  croppedImg.src = cropper.getCroppedCanvas().toDataURL(); 

  cropper.getCroppedCanvas().toBlob(function (blob) {
    const formData = new FormData();
    formData.append('images', blob, `img${index}.jpg`); 

    fetch(`/admin/editProduct/${productId}`, {
      method: 'POST',
      body: formData,
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(response => {
    if (response.redirected) {
      window.location.href = response.url;
    } else {
      return response.json();
    }
  })
  .then(data => {
    if (data) {
      console.log(data);
      alert(data.message);
    }
  })
    .catch(error => {
      console.error('Error uploading cropped image:', error);
    });
  }, 'image/jpeg',0.9); 
}

// document.getElementById('productForm').addEventListener('submit', async (event) => {
//     event.preventDefault(); 


//     const form = event.target;


//     const formData = new FormData(form);
//     console.log(formData)

//     try {
     
//       const response = await fetch(`/admin/editProduct/<%= product._id %>`, {
//         method: 'POST',
//         body: formData,
//         headers: {
//          'Content-Type': 'application/json', 
//         },
//       });

     
//       if (response.ok) {
//         const result = await response.text(); 
//         console.log('Success:', result);
        
//         window.location.href = '/admin/products'; 
//       } else {
//         const errorText = await response.text();
//         console.error('Error:', errorText);
        
//       }
//     } catch (error) {
//       console.error('Error:', error);
//       // Handle network errors or exceptions
//     }
//   });

// function validateAndSubmit() {
//   const productName = document.getElementById('product_name').value;
//   const description = document.getElementById('descriptionid').value;
//   const regularPrice = document.getElementById('regularPrice').value;
//   const salePrice = document.getElementById('salePrice').value;
//   const quantity = document.getElementById('quantity').value;
//   const images = document.getElementById('input1').files;


//   // Validate form inputs
//   if (!productName || !description || !regularPrice || !salePrice || !quantity) {
//     alert('Please fill in all required fields.');
//     return false; // Prevent form submission
//   }

//   return true; // Proceed with form submission
// }


</script>


<%- include("../../views/partials/admin/footer") %>
